-- 1) Identify the day of the week when the customers are most active and least active. Active is determined based on the no of steps.

	select distinct most_active, least_active
	from (
		select day_of_week, sum(total_steps) as total_steps
		, first_value(day_of_week) over(order by sum(total_steps) desc) as most_active
		, first_value(day_of_week) over(order by sum(total_steps)) as least_active
		from daily_activity 
		group by day_of_week ) x;
	


-- 2) Identify the customer who has the most effective sleep. Effective sleep is determined based on is customer spent most of the time in bed sleeping.
	
	with cte as 
		(select customer_id 
		, (sum(total_time_in_bed) - sum(total_minutes_asleep)) as wasted_time
		, rank() over(order by (sum(total_time_in_bed) - sum(total_minutes_asleep))) as rnk
		from sleep_day
		group by customer_id)
	select customer_id
	from cte 
	where rnk=1;



-- 3) Identify customers with no sleep record.
	
	select distinct customer_id from daily_activity
	where customer_id not in (  select customer_id 
								from sleep_day);



-- 4) Fetch all customers whose daily activity, sleep and weight logs are all present.
	
	select customer_id from daily_activity
	intersect
	select customer_id from weight_log
	intersect
	select customer_id from sleep_day;



-- 5) For each customer, display the total hours they slept for each day of the week. Your output should contains 8 columns, first column is the customer id and the next 7 columns are the day of the week (like monday, tuesday etc)

-- Solution using CASE statement
	select customer_id
	, sum(case when day_of_week='Monday' then total_minutes_asleep else 0 end) as Monday
	, sum(case when day_of_week='Tuesday' then total_minutes_asleep else 0 end) as Tuesday
	, sum(case when day_of_week='Wednesday' then total_minutes_asleep else 0 end) as Wednesday
	, sum(case when day_of_week='Thursday' then total_minutes_asleep else 0 end) as Thursday
	, sum(case when day_of_week='Friday' then total_minutes_asleep else 0 end) as Friday
	, sum(case when day_of_week='Saturday' then total_minutes_asleep else 0 end) as Saturday
	, sum(case when day_of_week='Sunday' then total_minutes_asleep else 0 end) as Sunday
	from sleep_day
	group by customer_id
	order by customer_id;

-- Solution using CROSSTAB
	create extension tablefunc;

	select customer_id
	, coalesce(Monday,0) as Monday
	, coalesce(Tuesday,0) as Tuesday
	, coalesce(Wednesday,0) as Wednesday
	, coalesce(Thursday,0) as Thursday
	, coalesce(Friday,0) as Friday
	, coalesce(Saturday,0) as Saturday
	, coalesce(Sunday,0) as Sunday
	from crosstab('	select customer_id,day_of_week, sum(total_minutes_asleep) as total_sleep
					from sleep_day
					group by customer_id, day_of_week
					order by customer_id, day_of_week'
					,'select distinct day_of_week from sleep_day')
		as result(customer_id bigint, Monday bigint, Tuesday bigint, Wednesday bigint, 
			Thursday bigint, Friday bigint, Saturday bigint, Sunday bigint);




-- 6) For each customer, display the following:
customer_id
date when they had the highest_weight(also mention weight in kg) 
date when they had the lowest_weight(also mention weight in kg)

	select distinct d.customer_id
	, coalesce(first_value(dates||'  ('||weight_kg||' kgs)') over(partition by d.customer_id order by weight_kg desc), 'NA') as highest_weight_on
	, coalesce(first_value(dates||'  ('||weight_kg||' kgs)') over(partition by d.customer_id order by weight_kg), 'NA') as lowest_weight_on
	from weight_log w
	right join daily_activity d on d.customer_id=w.customer_id
	order by highest_weight_on;




-- 7) Fetch the day when customers sleep the most.

	select day_of_week
	from (
		select day_of_week, sum(total_minutes_asleep) as total_sleep
		, rank() over(order by sum(total_minutes_asleep) desc) as rnk
		from sleep_day
		group by day_of_week) x
	where x.rnk=1;	




-- 8) For each day of the week, determine the percentage of time customers spend lying on bed without sleeping.

	select day_of_week
	, round(((sum(total_time_in_bed)-sum(total_minutes_asleep))::decimal/sum(total_time_in_bed)::decimal)*100,2) as percent
	from sleep_day
	group by day_of_week;




-- 9) Identify the most repeated day of week. Repeated day of week is when a day has been mentioned the most in entire database.

	with cte as 
			(select day_of_week from daily_activity
			union all
			select day_of_week from weight_log
			union all
			select day_of_week from sleep_day),
		cte_final as 
			(select day_of_week, count(1) as occurence
			, rank() over(order by count(1) desc) as rnk
			from cte
			group by day_of_week)
	select day_of_week
	from cte_final
	where rnk=1;




-- 10) Based on the given data, identify the average kms a customer walks based on 6000 steps.

	select customer_id, round(avg(total_distance),2) as distance_kms
	from daily_activity 
	where total_steps > 6000
	group by customer_id
	order by distance_kms desc;

	